import base64
import tempfile
import os
import subprocess


with open('archive.zip', 'rb') as f:
    data = f.read()

b64 = base64.b64encode(data).decode('ascii')

base = ""

# Optionally, print with line breaks every 76 chars for readability:
for i in range(0, len(b64), 76):
    base = base + b64[i:i+76]


print(base)



script = f'''
# This file was generated by maker.py on repo https://github.com/Enderman-brewer/mini-repos
# To regenerate this file, make a valid archive.zip and place it in this DIR, then
# run maker.py
import zipfile
import io
import base64

# DO NOT MODIFY
zip_b64 = """
{base}
"""

zip_data = base64.b64decode(zip_b64)

with zipfile.ZipFile(io.BytesIO(zip_data)) as zip_ref:
    zip_ref.extractall()

print("Extracted all files from embedded zip data")
'''

print(script)

script_content = script
print("Wow, no errors? Ok, this bit will freeze for a second, good luck.")


with open("archive.py", "w") as f:
    f.write(script)
print("Saved self extracter to archive.py")

# Create a temporary directory
with tempfile.TemporaryDirectory() as temp_dir:
    script_path = os.path.join(temp_dir, "script.sh")
    
    # Save the script to a file
    with open(script_path, "w") as script_file:
        script_file.write(script_content)
    
    # Make the script executable
    os.chmod(script_path, 0o755)
    
    # Run the script
    result = subprocess.run(["python3", script_path], capture_output=True, text=True)
    
    # Print the output
    print("Script output:", result.stdout)
    print("Script errors:", result.stderr)
